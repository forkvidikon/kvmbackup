
######################## Функция создания дампа xml виртуальной машины ##############################
function dumpconfig {

    # Проверка директорий для хранения конфигов
    if [[ -d $config_patch ]]
        then 
            error_handler 0 0 "Поиск директории для файлов конфигурации" 
        else
            error_handler 1 "Не удалось найти директорию для записи файлов конфигурации. Проверьте путь" "Проверка директории для файлов конфигурации"
    fi

    if [[ $config_use_date = "yes" ]]
        then
            virsh dumpxml $vmachine_name > $config_patch/$config_name-$TIME.xml 
        else
            virsh dumpxml $vmachine_name > $config_patch/$config_name.xml
    fi

    # Возвращение кода завершения. Любой не нулевой будет считаться ошибочным
    error_handler $? "Не удалось создать дамп конфигурации. Возможно, не хватает прав для записи в директорию" "Попытка создать дамп конфигурации"

}
######################################################################################################


######################## Функция выключения виртуальной машины #######################################

function vmachine_shutdown {

    local machine_off="false"
    # Дисковый бекап возможен только после полной остановки виртуальной машины

    virsh shutdown $vmachine_name 2> $echofile
    error_handler 0 0 "Выключение виртуальной машины"

    for (( a=0; a <= 24; a++))
        do
            if [[ -n $(virsh list | grep $vmachine_name) ]]
                then 
                    if [[ $a -eq 24 ]]
                        then     
                            error_handler 1 "Не удалось выключить машину за отведенное время. Выключите машину в ручную, либо увеличте таймаут ожидания" "Выключение виртуальной машины"
                        else
                            sleep 5
                    fi
                else
                    machine_off="true"
                    error_handler 0 0 "Виртуальная машина выключилась за отведенное время"
                    break 
            fi

        done
          
    
    # Проверяем, корректно ли завершила работу машина. Если нет - выключить принудительно (если дано разрешение)
    if [[ $machine_off != "true" ]] # Проверить на работу
        then 
            if [[ $vmashine_allowed_to_destroy = "yes" ]]
                then
                    virsh destroy $vmachine_name 2> $echofile
                    error_handler 0 "Вируальная машина $vmachine_name не отвечает на запрос. Попытка выключения питания" "Выключение виртуальной машины"
                else
                    error_handler 1 "Не удалось остановить работающую виртуальную машину $vmachine_name. Машина не реагирует на комманды и нет разрешения на отключение питания. Выход." "Выключение виртуальной машины"
            fi
            
    fi
}

######################################################################################################

########################## Функция запуска виртуальной машины ########################################

function vmachine_start {
    # Запуск виртуальной машины после копирования
    virsh start $vmachine_name 2> $echofile

    # Возвращение кода завершения. Любой не нулевой будет считаться ошибочным
    error_handler $? $echofile "Включаем виртуальную машину"

}

########################################################################################################


######################### Функция создания полнодисковой копии ###########################################
function fulldiskcopy {

    # Записываем в переменную путь до диска виртуальной машины 
local disk_directory=$(virsh domblklist $vmachine_name | awk 'NR == 3{print $2}')

     # Проверка директории для копий дисков
    if [[ -f $disk_directory ]]
        then 
            error_handler 0 0 "Проверка виртуальных дисков"
        else
            error_handler 1 "Не удалось найти виртуальный диск" "Проверка виртуальных дисков"
    fi

    # Проверка на необходимость подставить дату и копирование
    if [[ $disk_output_file_use_date = "yes" ]]
        then
            cp $disk_directory $disk_output_file_path/$TIME-$disk_output_file_name 2> $echofile
        else 
            cp $disk_directory $disk_output_file_path/$disk_output_file_name 2> $echofile
    fi
    
    # Возвращение кода завершения. Любой не нулевой будет считаться ошибочным
    error_handler $? $echofile "Создание полной копии диска"
}
#############################################################################################################

######################## Создание снапшотов ##################################################################

function create_snapshot {
    

    # Провека наличия имени снапшота в файле конфигурации
    # При отсутсвии имени в переменную будет записано имя машины и время создания снимка

    #if [[ -z $snapshot_name ]]
    #    then
    #        snapshot_name=$vmachine_name
    #fi

    # Провека наличия описания в файле конфигурации
    # При отсутсвии бедет записано время создания снимка

    #if [[ -z $snapshot_description ]]
    #    then 
    #        snapshot_description="automatically created snapshot - $TIME"
    #fi

    # Провека диска виртуальной машины
    # Создание снимков доступно только для дисков qcow/qcow2 и
    # если диск не подходит под условия, то вся функция завершится с ошибкой

    if [[ -z $(virsh dumpxml $vmachine_name | grep -o "qcow*") ]]
        then 
            error_handler 1 "Создание снимков доступно только для дисков формата qcow/qcow2" "Создание снапшота"
    fi

    # Создание снимка. На выбор доступно два варианта :
    #   * live-snapshot, который создается на работающей машине (Важно: снапшот не хранит состояние оперативной памяти)
    #   * snapshot - обычный снимок. Для создания необходимо выключить виртуальную машину
    #

    if [[ $snapshot_live = "yes" ]] 
        then
            virsh snapshot-create $vmachine_name --live 2> $echofile
            error_handler $? $echofile "Создание снимка работающей машины"
        else 
        #    vmachine_shutdown
            virsh snapshot-create $vmachine_name 2> $echofile
            error_handler $? $echofile "Выключение машины и создание снимка"
        #    vmachine_start
    fi


}









#################################################################################################################